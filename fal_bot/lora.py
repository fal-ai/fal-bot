from typing import Literal

import discord
from discord import app_commands

from fal_bot import utils
from fal_bot.consts import SD_MODELS, SD_SCHEDULERS

LORA_BASE_URL = "https://110602490-lora.gateway.alpha.fal.ai"


@app_commands.command(
    name="diffusion",
    description="Run any stable diffusion model with any loras.",
)
@app_commands.autocomplete(model_name=utils.autocomplete_from(SD_MODELS))
async def command(
    interaction: discord.Interaction,
    prompt: str,
    negative_prompt: str = "",
    guidance_scale: float = 0.0,
    model_name: str = "stabilityai/stable-diffusion-xl-base-1.0",
    mode: Literal["Speed", "Quality"] = "Speed",
    scheduler: Literal[tuple(SD_SCHEDULERS)] = "DPM++ 2M Karras",  # type: ignore
    lora_url: str | None = None,
    lora_scale: float = 1.0,
):
    await interaction.response.send_message("Your request has been received.")

    loras, lora_information = [], {}  # type: ignore
    with utils.Timed() as timer:
        loras = []
        if lora_url:
            loras.append({"path": lora_url, "scale": lora_scale})
            lora_information["Lora URL"] = lora_url
            lora_information["Lora Scale"] = str(lora_scale)

        result = await utils.submit_interactive_task(
            interaction,
            LORA_BASE_URL,
            model_name=model_name,
            prompt=prompt,
            negative_prompt=negative_prompt,
            guidance_scale=guidance_scale,
            num_inference_steps=35 if mode == "Speed" else 50,
            scheduler=scheduler,
            loras=loras,
        )

    if result is None:
        return None

    embed = utils.make_prompted_image_embed(
        title="Stable Diffusion Image",
        image_url=result["images"][0]["url"],
        prompt=prompt,
        fields={
            "Model": model_name,
            "Mode": mode,
            "Scheduler": scheduler,
            "Guidance Scale": guidance_scale,
            **lora_information,
            "Time Taken": f"{timer.elapsed:.2f}s",
            "Generated by": interaction.user.mention,
        },
    )
    await interaction.edit_original_response(content=None, embed=embed)
